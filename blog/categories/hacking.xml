<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[benIT&#039;s notebook]]></title>
    <link href="/blog/categories/hacking.xml" rel="self"/>
    <link href="/"/>
    <updated>2021-05-18T13:28:40+00:00</updated>
    <id>/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[wireshark basics]]></title>
            <link href="/blog/2021/02/17/wireshark"/>
            <updated>2021-02-17T00:00:00+00:00</updated>
            <id>/blog/2021/02/17/wireshark</id>
            <content type="html"><![CDATA[<h2 id="install">install</h2>

<pre><code>sudo apt install wireshark -y
</code></pre>

<p>answer yes to allow wireshark execution question for non super user.</p>

<pre><code>sudo usermod -aG wireshark $(whoami)
</code></pre>

<p>logout and login</p>

<h2 id="add-src-%26-destination-port-columns">Add src &amp; destination port columns</h2>

<p>right clock "column preferences" and add "source port" &amp; "destination port"</p>

<h2 id="sniff-post-request-on-a-uri-pattern">sniff post request on a uri pattern</h2>

<pre><code>http.request.method == "POST" &amp;&amp; http.request.uri contains login 
</code></pre>

<h2 id="scan-lan">Scan LAN</h2>

<p>Let's use nmap to san lan and choose the @IP machine to listen. Here it's a RPI.</p>

<pre><code>sudo nmap -sT -O 192.168.1.0/24
</code></pre>

<p>=></p>

<pre><code>Starting Nmap 7.60 ( https://nmap.org ) at 2021-02-17 10:09 CET
Nmap scan report for XYZ-eth0 (192.168.1.68)
Host is up (0.0030s latency).
Not shown: 994 closed ports
PORT     STATE SERVICE
21/tcp   open  ftp
22/tcp   open  ssh
80/tcp   open  http
443/tcp  open  https
3000/tcp open  ppp
5432/tcp open  postgresql
MAC Address: B8:27:EB:39:1D:77 (Raspberry Pi Foundation)
</code></pre>

<h2 id="wireshark-over-ssh-via-sshdump">Wireshark over ssh via sshdump</h2>

<h3 id="install-tools-on-the-remote-server">Install tools on the remote server</h3>

<pre><code>apt install -y tcpdump
</code></pre>

<h4 id="allow-tcpdump-execution-for-non-superuser">Allow tcpdump execution for non superuser</h4>

<pre><code>sudo groupadd pcap
sudo usermod -a -G pcap $USER
sudo chgrp pcap /usr/sbin/tcpdump
sudo chmod 750 /usr/sbin/tcpdump
sudo setcap cap_net_raw,cap_net_admin=eip /usr/sbin/tcpdump
</code></pre>

<p>logout &amp; login</p>

<p>check this command is running without error:</p>

<pre><code>tcpdump -A port '(80 or 443)'
</code></pre>

<p>When this part is ok, we can now use wireshark to use tcp dump over ssh. This can be checked with an ssh command:</p>

<pre><code>ssh XXX@192.168.1.68 "sudo tcpdump"
</code></pre>

<h2 id="configure-wireshark-to-listen-over-ssh">Configure wireshark to listen over ssh</h2>

<p>From the main menu, select ssh remote capture: sshdump</p>

<p>Fill in the windows</p>

<p>We can now capture packets.</p>

<h2 id="wireshark-filters">Wireshark filters</h2>

<pre><code>http
ip.dst == 192.168.1.68
ip.src == 192.168.1.68
http.request.method == "POST" 
http.request.method == "POST" &amp;&amp; http.request.uri contains login
tcp.port==80
tcp.port==443
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[RIP a md5 hash with john the ripper]]></title>
            <link href="/blog/2019/05/22/john-the-ripper-rip-md5-hash"/>
            <updated>2019-05-22T00:00:00+00:00</updated>
            <id>/blog/2019/05/22/john-the-ripper-rip-md5-hash</id>
            <content type="html"><![CDATA[<h2 id="rip-a-md5-hash">RIP a md5 hash</h2>

<pre><code>echo "ca50dfb151104b1ee005d68fa9a970ce" &gt; md5-to-crack
john --format=raw-md5 md5-to-crack --show
</code></pre>

<p>returns:</p>

<pre><code>john --format=raw-md5 md5-to-crack --show
?:dolorem

1 password hash cracked, 0 left
</code></pre>

<p>Password for hash <code>ca50dfb151104b1ee005d68fa9a970ce</code> is <code>dolorem</code></p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Python keylogger]]></title>
            <link href="/blog/2019/05/07/python-keylogger"/>
            <updated>2019-05-07T00:00:00+00:00</updated>
            <id>/blog/2019/05/07/python-keylogger</id>
            <content type="html"><![CDATA[<h2 id="python-keylogger-package">Python keylogger package</h2>

<p>The job is already done and packaged with <a href="https://pypi.org/project/keylogger/">that Python package</a>.</p>

<h2 id="installation">Installation</h2>

<h3 id="python-3">Python 3</h3>

<p>This package works with Python 3, make sure you are using it:</p>

<pre><code>python --version
</code></pre>

<p>If python2 is set by default:</p>

<pre><code>sudo apt-get install python3-pip
</code></pre>

<h3 id="package">Package</h3>

<pre><code>pip install keylogger
</code></pre>

<p>If python2 is set by default:</p>

<pre><code>sudo -E pip3 install keylogger
</code></pre>

<h2 id="set-up-log-file">Set up log file</h2>

<pre><code>sudo touch /var/log/keylogger.log
</code></pre>

<h2 id="group-%26-ownership-for-log-file">Group &amp; ownership for log file</h2>

<pre><code>sudo groupadd spy
sudo usermod -a -G spy vagrant    
sudo chown root:spy /var/log/keylogger.log
sudo chmod 660 /var/log/keylogger.log
</code></pre>

<h2 id="usage">Usage</h2>

<pre><code>/home/vagrant/.local/bin/keylogger --log-file /var/log/keylogger.log --clean-file &amp;
</code></pre>

<h2 id="watch-log">Watch log</h2>

<pre><code>tail -f /var/log/keylogger.log 
</code></pre>

<p>Below the log generated by typing in firefox: <code>gmail.com</code> ang logging with <code>thisismymail@gmail.com</code>/<code>mypassword</code>:</p>

<pre><code>g
m
a
i
l
Shift_L
period
c
o
m
Return
t
h
i
s
i
s
m
y
m
a
i
l
Shift_L
Shift_L
Shift_L
[65027]
agrave
g
m
a
i
l
Shift_L
period
c
o
m
m
y
p
a
s
s
w
o
r
d
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[RIP linux user password with John the Ripper]]></title>
            <link href="/blog/2019/05/06/john-the-ripper-rip-linux-user-password"/>
            <updated>2019-05-06T00:00:00+00:00</updated>
            <id>/blog/2019/05/06/john-the-ripper-rip-linux-user-password</id>
            <content type="html"><![CDATA[<h2 id="add-a-new-user">Add a new user</h2>

<pre><code>sudo useradd -r foo
sudo passwd foo
Enter new UNIX password: 
Retype new UNIX password: 
passwd: password updated successfully
</code></pre>

<h2 id="password-hash-file">Password hash file</h2>

<p>Linux user password hash are stored here: <code>/etc/shadow</code></p>

<h2 id="rip-it%21">Rip it!</h2>

<pre><code>sudo john /etc/shadow
Created directory: /root/.john
Using default input encoding: UTF-8
Loaded 3 password hashes with 3 different salts (sha512crypt, crypt(3) $6$ [SHA512 256/256 AVX2 4x])
Cost 1 (iteration count) is 5000 for all loaded hashes
Will run 5 OpenMP threads
Proceeding with single, rules:Wordlist
Press 'q' or Ctrl-C to abort, almost any other key for status
vagrant          (vagrant)
Warning: Only 3 candidates buffered for the current salt, minimum 20
needed for performance.
toor             (root)
Warning: Only 14 candidates buffered for the current salt, minimum 20
needed for performance.
Warning: Only 6 candidates buffered for the current salt, minimum 20
needed for performance.
Warning: Only 16 candidates buffered for the current salt, minimum 20
needed for performance.
Warning: Only 17 candidates buffered for the current salt, minimum 20
needed for performance.
Warning: Only 3 candidates buffered for the current salt, minimum 20
needed for performance.
Almost done: Processing the remaining buffered candidate passwords, if any
Warning: Only 15 candidates buffered for the current salt, minimum 20
needed for performance.
Proceeding with wordlist:/usr/share/john/password.lst, rules:Wordlist
foobar           (foo)
3g 0:00:00:01 DONE 2/3 (2019-05-06 10:39) 1.570g/s 1806p/s 1808c/s 1808C/s 1234qwer..ford
Use the "--show" option to display all of the cracked passwords reliably
Session completed
</code></pre>

<h3 id="and-user-password-is...">And user password is...</h3>

<pre><code>foobar           (foo)
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[RIP a password protected archive with John the Ripper]]></title>
            <link href="/blog/2019/05/06/john-the-ripper-rip-archive"/>
            <updated>2019-05-06T00:00:00+00:00</updated>
            <id>/blog/2019/05/06/john-the-ripper-rip-archive</id>
            <content type="html"><![CDATA[<h2 id="install-kali">Install KALI</h2>

<p>First, <a href="https://www.kali.org/news/announcing-kali-for-vagrant/">intall a kali headless VM with vagrant</a>.</p>

<p>Grant large CPUs and RAM resources to the VM. For instance, in <code>Vagrantfile</code>:</p>

<pre><code># Create a forwarded port
config.vm.network "forwarded_port", guest: 80, host: 8080

# Create a private network. In VirtualBox, this is a Host-Only network
config.vm.network "private_network", ip: "192.168.33.101"

# VirtualBox specific settings
config.vm.provider "virtualbox" do |vb|
# Hide the VirtualBox GUI when booting the machine
vb.gui = false

# Customize the amount of memory on the VM:
vb.memory = "8192"
vb.cpus= "5"
end

# Provision the machine with a shell script
config.vm.provision "shell", inline: &lt;&lt;-SHELL
apt-get update
apt-get install -y crowbar
SHELL
end
</code></pre>

<h2 id="generate-a-test-archive">Generate a test archive</h2>

<pre><code>echo "foo bar" &gt; file.txt
zip -P pass archive.zip file.txt
</code></pre>

<p><strong>Thus, our archive is protected with the password: <code>pass</code></strong></p>

<p>Test password protection:</p>

<pre><code>unzip archive.zip 
Archive:  archive.zip
[archive.zip] file.txt password: 
</code></pre>

<h2 id="rip-archive.zip">RIP archive.zip</h2>

<h3 id="get-password-hash-with-zip2john">Get password hash with zip2john</h3>

<pre><code>zip2john archive.zip &gt; hash.txt
</code></pre>

<p>Prints :</p>

<pre><code>ver 1.0 efh 5455 efh 7875 archive.zip/file.txt PKZIP Encr: 2b chk, TS_chk, cmplen=20, decmplen=8, crc=13DDB427
</code></pre>

<h3 id="rip-hash">RIP hash</h3>

<pre><code>john hash.txt
</code></pre>

<p>Prints:</p>

<pre><code>Using default input encoding: UTF-8
Loaded 1 password hash (PKZIP [32/64])
Will run 2 OpenMP threads
Proceeding with single, rules:Wordlist
Press 'q' or Ctrl-C to abort, almost any other key for status
Warning: Only 4 candidates buffered for the current salt, minimum 8
needed for performance.
Warning: Only 5 candidates buffered for the current salt, minimum 8
needed for performance.
Warning: Only 6 candidates buffered for the current salt, minimum 8
needed for performance.
Warning: Only 4 candidates buffered for the current salt, minimum 8
needed for performance.
Almost done: Processing the remaining buffered candidate passwords, if any
Proceeding with wordlist:/usr/share/john/password.lst, rules:Wordlist
pass             (archive.zip/file.txt)
1g 0:00:00:00 DONE 2/3 (2019-05-06 09:53) 50.00g/s 2109Kp/s 2109Kc/s 2109KC/s 123456..Peter
Use the "--show" option to display all of the cracked passwords reliably
Session completed
</code></pre>

<h3 id="and-archive-password-is...">And archive password is...</h3>

<pre><code>pass             (archive.zip/file.txt)
</code></pre>

<h3 id="tips">Tips</h3>

<p>If you run <code>john</code> again, you will get:</p>

<pre><code>john hash.txt
Using default input encoding: UTF-8
Loaded 1 password hash (PKZIP [32/64])
No password hashes left to crack (see FAQ)
</code></pre>

<p>This means that the password has already been ripped, to print password check <code>.john/john.pot</code> file or use <code>--show</code> option:</p>

<pre><code>john hash.txt --show
archive.zip/file.txt:pass:file.txt:archive.zip::archive.zip

1 password hash cracked, 0 left
</code></pre>
]]></content>
        </entry>
    </feed>