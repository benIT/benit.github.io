<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[benIT&#039;s notebook]]></title>
    <link href="/blog/categories/docker.xml" rel="self"/>
    <link href="/"/>
    <updated>2021-05-18T13:28:40+00:00</updated>
    <id>/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[SSH X11 &amp; docker]]></title>
            <link href="/blog/2019/02/15/ssh-x11-docker"/>
            <updated>2019-02-15T00:00:00+00:00</updated>
            <id>/blog/2019/02/15/ssh-x11-docker</id>
            <content type="html"><![CDATA[<h2 id="purpose">Purpose</h2>

<p>Run GUI application inside a docker container using X11Forwarding.</p>

<p><a href="https://gist.github.com/udkyo/c20935c7577c71d634f0090ef6fa8393">source from github.</a></p>

<h2 id="create-a-container">Create a container</h2>

<h3 id="dockerfile">DockerFile</h3>

<pre><code>FROM ubuntu
RUN apt update \
    &amp;&amp; apt install -y firefox \
                      openssh-server \
                      xauth \
                      emacs \
    &amp;&amp; mkdir /var/run/sshd \
    &amp;&amp; mkdir /root/.ssh \
    &amp;&amp; chmod 700 /root/.ssh \
    &amp;&amp; ssh-keygen -A \
    &amp;&amp; sed -i "s/^.*PasswordAuthentication.*$/PasswordAuthentication no/" /etc/ssh/sshd_config \
    &amp;&amp; sed -i "s/^.*X11Forwarding.*$/X11Forwarding yes/" /etc/ssh/sshd_config \
    &amp;&amp; sed -i "s/^.*X11UseLocalhost.*$/X11UseLocalhost no/" /etc/ssh/sshd_config \
    &amp;&amp; grep "^X11UseLocalhost" /etc/ssh/sshd_config || echo "X11UseLocalhost no" &gt;&gt; /etc/ssh/sshd_config

RUN echo "CONTENT_OF_ID_RSA_PUB_KEY_HERE" &gt;&gt; /root/.ssh/authorized_keys
</code></pre>

<h3 id="build-it">Build it</h3>

<pre><code>docker build -t benit/ubuntu-x11 . --build-arg http_proxy=$http_proxy
</code></pre>

<h2 id="run-container">Run Container</h2>

<pre><code>docker run --name ubuntu-x11 --rm -d -p 2150:22 benit/ubuntu-x11
</code></pre>

<h2 id="ssh-client-configuration">SSH client configuration</h2>

<p>Edit <code>~/.ssh/config</code> on the client, here my workstation is named <code>lxdev</code>:</p>

<pre><code>Host ubuntuX11
     Hostname lxdev
     Port 2150
     user root
     ForwardX11 yes
     ForwardX11Trusted yes
</code></pre>

<h2 id="use-it%21">Use it!</h2>

<pre><code>ssh -X ubuntu-x11 emacs     
</code></pre>

<h2 id="enjoy%21">Enjoy!</h2>

<p><img src="/images/docker/docker-ssh-x11-emacs.png" alt="screenshot" /></p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[How to make a christmas garland with a nginx reverse proxy and 3 apache backends under docker?]]></title>
            <link href="/blog/2019/01/25/docker-make-a-christmas-garland-with-nginx-apache"/>
            <updated>2019-01-25T00:00:00+00:00</updated>
            <id>/blog/2019/01/25/docker-make-a-christmas-garland-with-nginx-apache</id>
            <content type="html"><![CDATA[<h1 id="purpose">Purpose</h1>

<p>This posts deals with doing yourself a christmas garland!</p>

<p>We will be using :</p>

<ul>
<li>nginx as a reverse proxy</li>
<li>apache as a backend</li>
<li>docker as a plateforme  </li>
</ul>

<h1 id="repository">Repository</h1>

<p><a href="https://github.com/benIT/docker-nginx-reverse-proxy">You will find a demonstration repository here.</a></p>

<h1 id="demo">Demo</h1>

<p><center><video width="640" height="480" controls src="https://benit.github.io/docker-nginx-reverse-proxy/demo.mp4"></video></center></p>

<p>If it does not work, download it from github repo:</p>

<pre><code>wget https://raw.githubusercontent.com/benIT/docker-nginx-reverse-proxy/master/demo.mp4
vlc demo.mp4
</code></pre>

<h1 id="conclusion">Conclusion</h1>

<p>Never forget that computing should always be fun!</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Docker 101: docker-compose]]></title>
            <link href="/blog/2019/01/15/docker-docker-compose"/>
            <updated>2019-01-15T00:00:00+00:00</updated>
            <id>/blog/2019/01/15/docker-docker-compose</id>
            <content type="html"><![CDATA[<h1 id="docker-compose">Docker compose</h1>

<p>Purpose: compose is a tool designed to create multi-containers app.</p>

<h2 id="install">Install</h2>

<pre><code>sudo apt install python-pip
pip install docker-compose
</code></pre>

<h2 id="docker-compose.yml">docker-compose.yml</h2>

<p>The magic happens in a file named <code>docker-compose.yml</code></p>

<h2 id="run">Run</h2>

<pre><code>docker-compose up -d
</code></pre>

<h2 id="stop">Stop</h2>

<pre><code>docker-compose down -v
</code></pre>

<h2 id="networking">Networking</h2>

<p><code>docker-compose</code> handles the creation a private network:</p>

<pre><code>Creating network "n-tiers_default" with the default driver
Creating object-cache ... done
Creating pgsql        ... done
Creating web          ... done
</code></pre>

<h1 id="example">Example</h1>

<p>Better than words, take a look at this <a href="https://github.com/benIT/docker-compose-n-tiers">repo that illustrates a classical n-tiers web app</a></p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Docker 101: networking]]></title>
            <link href="/blog/2019/01/14/docker-networking"/>
            <updated>2019-01-14T00:00:00+00:00</updated>
            <id>/blog/2019/01/14/docker-networking</id>
            <content type="html"><![CDATA[<h1 id="docker-running-containers-inside-a-bridge-network">Docker running containers inside a bridge network</h1>

<p>The purpose of this post is to isolate each tiers of our app into different containers.</p>

<p>We will create a private network and run containers inside this private network.</p>

<p><a href="https://docker-curriculum.com/#webapps-with-docker">This article is largely inspired by this great resource.</a></p>

<h2 id="networking">Networking</h2>

<h3 id="create-an-isolated-private-bridge-network">Create an isolated private bridge network</h3>

<pre><code>docker network create web-net    
</code></pre>

<h3 id="inspect-the-private-network">Inspect the private network</h3>

<pre><code>docker network inspect web-net
</code></pre>

<h3 id="run-a-container-inside-the-private-bridge-network-with-%60--net%60-option">Run a container inside the private bridge network with <code>--net</code> option</h3>

<pre><code>docker run --name pgsql-web --rm  -d --net web-net postgres:latest
docker run --name debian-web --rm -p 80:80 --net web-net -d benit/debian-web:latest
</code></pre>

<h3 id="inspect-the-private-network-to-get-ips-of-containers-of-the-private-network">Inspect the private network to get IPs of containers of the private network</h3>

<pre><code>docker network inspect web-net
</code></pre>

<p>gives:</p>

<pre><code> "Containers": {
            "3729ccbb14e514fd6c8b571ed9c985c28293cb5bfdb10c6c233773f50d6ba763": {
                "Name": "debian-web",
                "EndpointID": "c370cab93cdd2ac9f30f568a1709b8c998d2ca36106d5423b484a20aadbff84f",
                "MacAddress": "02:42:ac:12:00:03",
                "IPv4Address": "172.18.0.3/16",
                "IPv6Address": ""
            },
            "61bcf5cd9838c8c2e66beef73a04a2704a3be7e2085a5c6b4ad58bd78f12a138": {
                "Name": "pgsql-web",
                "EndpointID": "128f50ead4974a725c04551cb284fec2c733a48375a4819096b0b623ff2af4ac",
                "MacAddress": "02:42:ac:12:00:02",
                "IPv4Address": "172.18.0.2/16",
                "IPv6Address": ""
            }
        },
</code></pre>

<h2 id="putting-it-all-together">Putting it all together</h2>

<h3 id="let%27s-create-a-database">Let's create a database</h3>

<pre><code>docker container exec pgsql-web psql -U postgres -c "create database webapp";
docker container exec pgsql-web psql -U postgres -d webapp -c "CREATE TABLE account(user_id serial PRIMARY KEY,username VARCHAR (50) UNIQUE NOT NULL,created_on TIMESTAMP NOT NULL);" ;
docker container exec pgsql-web psql -U postgres -d webapp -c "INSERT INTO account (username,created_on ) VALUES ('foo','2019-01-01') ;" ;
docker container exec pgsql-web psql -U postgres -d webapp -c "INSERT INTO account (username,created_on ) VALUES ('bar','2019-01-02') ;" ;
</code></pre>

<h3 id="connect-database-container-from-webserver-container">Connect database container from webserver container</h3>

<pre><code>docker container exec -it debian-web  psql -U postgres -h 172.18.0.2 -d webapp -c "select * from account;" ;
</code></pre>

<p>gives:</p>

<pre><code> user_id | username |     created_on      
---------+----------+---------------------
       1 | foo      | 2019-01-01 00:00:00
       2 | bar      | 2019-01-02 00:00:00
(2 rows)
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Docker 101: Dockerfile]]></title>
            <link href="/blog/2019/01/14/docker-dockerfile"/>
            <updated>2019-01-14T00:00:00+00:00</updated>
            <id>/blog/2019/01/14/docker-dockerfile</id>
            <content type="html"><![CDATA[<h1 id="dockerfile">Dockerfile</h1>

<p>A <code>Dockerfile</code> is a text document that contains all the commands a user could call on the command line to assemble an image.</p>

<h2 id="example">Example</h2>

<p>You will find <a href="https://github.com/benIT/debian-web">in this repo</a> a running <code>Dockerfile</code>  based on a debian image that runs an Apache webserver.</p>

<p>You will find <a href="https://github.com/benIT/debian-web/blob/master/README.md">in this file</a> all the base commands to manage a <code>Dockerfile</code> .</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Install Docker on ubuntu 16.04]]></title>
            <link href="/blog/2019/01/10/docker-installation"/>
            <updated>2019-01-10T00:00:00+00:00</updated>
            <id>/blog/2019/01/10/docker-installation</id>
            <content type="html"><![CDATA[<h2 id="install-docker-ce-for-ubuntu">Install Docker CE for Ubuntu</h2>

<p>See <a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/">official documentation</a>.</p>

<h2 id="run-docker-as-a-non-root-user">Run docker as a non-root user</h2>

<p>See <a href="https://docs.docker.com/install/linux/linux-postinstall/">official documentation</a>.</p>

<h2 id="configure-docker-to-be-used-behind-a-http-proxy">Configure docker to be used behind a http proxy</h2>

<p>Create the following file <code>/etc/systemd/system/docker.service.d/http-proxy.conf</code> and edit it:</p>

<pre><code>[Service]
Environment=http_proxy=http://user:pass@ip:port
Environment=https_proxy=http://user:pass@ip:port
</code></pre>

<h2 id="test">Test</h2>

<pre><code>docker run hello-world
</code></pre>

<h2 id="install-docker-compose">Install docker-compose</h2>

<p>See <a href="https://docs.docker.com/compose/install/">official documentation</a>.</p>

<p>currently, I use docker-compose <code>v1.23.2</code></p>

<pre><code>sudo curl -L "https://github.com/docker/compose/releases/download/1.23.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose
docker-compose --version
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Docker 101:  basics]]></title>
            <link href="/blog/2017/12/08/docker-basics"/>
            <updated>2017-12-08T00:00:00+00:00</updated>
            <id>/blog/2017/12/08/docker-basics</id>
            <content type="html"><![CDATA[<h2 id="containers">Containers</h2>

<p>A container is a way to create isolated env that can run code while sharing a single OS.</p>

<h3 id="run-a-container">Run a container</h3>

<pre><code>docker container run -p 9999:80 httpd:2.4
</code></pre>

<p>The <code>--detach</code> flag can be used to run the container in background:</p>

<pre><code>docker container run --detach -p 9999:80 httpd:2.4
</code></pre>

<h3 id="list-containers">List containers</h3>

<pre><code>docker container ls
</code></pre>

<h3 id="run-commands-on-container">Run commands on container</h3>

<pre><code>docker container exec my_container_name du -mh
</code></pre>

<h3 id="attaching-a-shell-to-a-container">Attaching a Shell to a Container</h3>

<p>To get a shell inside the container:</p>

<pre><code>docker container exec -it my_container_name /bin/bash

PATH=$PATH:/usr/games/
export PATH
</code></pre>

<h2 id="dockerfiles">Dockerfiles</h2>

<p>Dockerfile -> create an image -> to generate a container</p>

<p>Inside a file named <code>Dockerfile</code>.</p>

<h3 id="dockerfile-example">Dockerfile example</h3>

<pre><code>FROM httpd:2.4
EXPOSE 80
RUN apt-get update &amp;&amp; apt-get install -y fortunes
COPY page.html /var/www/html/
LABEL maintainer="moby-dock@example.com"
</code></pre>

<h3 id="building-an-image-from-a-dockerfile">Building an Image From a Dockerfile</h3>

<pre><code>docker image build --tag web-server:1.0 .
</code></pre>

<p>End the command with a single . so it knows to look for the Dockerfile in the same folder that the command is run in.</p>

<pre><code>docker image ls


docker container run -p 80:80 web-server:1.0
</code></pre>

<h2 id="volumes">Volumes</h2>

<p>It is possible to copy files into a container but files will be lost when container stops.</p>

<pre><code>docker container cp page.html my_container_name:/var/www/html/.
</code></pre>

<p>A better solution is to use volumes.
Data volumes expose files on your host machine to the container.</p>

<h3 id="creating-a-volume">Creating a Volume</h3>

<pre><code>docker run -d -p 80:80 -v /my-files:/var/www/html web-server:1.1
</code></pre>

<p>Shared folder  between <code>/my-files</code> on host machine and the <code>html</code> folder in the container</p>
]]></content>
        </entry>
    </feed>